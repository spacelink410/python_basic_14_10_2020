"""

Реализовать структуру данных «Товары».
Она должна представлять собой список кортежей.
Каждый кортеж хранит информацию об отдельном товаре.
В кортеже должно быть два элемента — номер товара и словарь с параметрами
(характеристиками товара: название, цена, количество, единица измерения).
Структуру нужно сформировать программно, т.е. запрашивать все данные у пользователя.

Необходимо собрать аналитику о товарах.
Реализовать словарь, в котором каждый ключ — характеристика товара, например название,
а значение — список значений-характеристик, например список названий товаров.

"""

# обозачим все переменные, в процессе написания кода спсиок рос
keys_list: list = []
buffer_list: list = []
description_list: list = []
description_dict: dict = {}
product_item: tuple = ()
analyst_dict: dict = {}
elem_name_list: list = []
elem_name_list_2: list = []
enum: list = ['название', 'цена', 'количество', 'ед.']

# чтобы можно было протестировать, внес тестовый набор, код для добавления можно найти ниже
# TODO хотел обратить внимание, что тестовый набор и решение преднамеренно сделал с неоднородными словарями
products_list: list = [
                    (1, {'название': 'компьютер', 'цена': 20000, 'количество': 5, 'eд': 'шт'}),
                    (2, {'название': 'принтер', 'цена': 6000, 'количество': 2, 'eд': 'шт', 'доп. хар.': 'х1'}),
                    (3, {'название': 'сканер', 'цена': 2000, 'количество': 7, 'eд': 'шт'})
                ]

# для быстроты добавления сделал добавление параметров по шаблону enum.
# Все лишние характеристики будут игнорироваться
# TODO в будущем можно сделать добавление параметров по свободному шаблону пользователя
if input("Хотите оставить тестовый набор? Введите n, чтобы создать свой: ") == 'n':
    i: int = 0
    products_list.clear()
    while True:
        if input("Завершить добавление товара? 'y': ") != "y":
            description = input("Введите через запятую описание товара:\n"
                                "название, цена, количество, ед. измерения: ").split(sep=',')
            j: int = 0
            for el in enum:
                description_dict.update({el: description[j]})
                j += 1
            product_item = (i, description_dict.copy())
            products_list.append(product_item)
            i += 1
        else:
            break

print(f"Каталог товаров:\n {products_list}")

# допустим у каждого товара будет разный набор параметров, при этом мы можем и не знать о названиях
# тогда пройдемся по всем данным и соберем все ключи, какие есть в описании товара
# параллельно оставим только необходимые данные
for el in products_list:
    buff_list = el[1]
    keys_list.extend(list(buff_list.keys()))
    description_list.append(el[1])

# удалим дубликаты ключей. Потеряем сортируовку, но обрежем все быстрее
keys = set(keys_list)

# запускаем формирование словаря с характеристиками товаров
for el_name in keys:

    # проходим по каждому значению списка со словарями характеристик
    for el_description in description_list:

        # проверяем, есть ли вообще наименование характеристики у текущего описания
        if el_name in el_description:
            buff_dict = dict(el_description)

            # исключаем повторяющиеся значения в аналитике
            if buff_dict[el_name] not in elem_name_list:
                elem_name_list.append(buff_dict[el_name])

    # делаем копию данных, чтобы данные не потерялись
    elem_name_list_2 = elem_name_list.copy()

    # оформляем все в структуру, которая необходима по заданиям
    buff_dict_fin = {el_name: elem_name_list_2}
    analyst_dict.update(buff_dict_fin)
    elem_name_list.clear()

print(f"\nАналитика по каталогу:\n {analyst_dict}")
